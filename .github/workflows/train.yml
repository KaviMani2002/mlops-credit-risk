name: Train Multi Model with DVC

on:
  workflow_dispatch:
  push:
    paths:
      - 'src/**.py'
      - '.github/workflows/train.yml'

jobs:
  train-model:
    runs-on: self-hosted

    env:
      MLFLOW_TRACKING_URI: http://20.106.177.129:5000
      AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
      AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
      GITHUB_ACTIONS: true

    steps:
      - name: üì• Checkout repo
        uses: actions/checkout@v3

      - name: üñ•Ô∏è Debug runner environment
        run: |
          echo "Runner OS: ${{ runner.os }}"
          echo "Architecture: ${{ runner.arch }}"
          python3 --version
          pip3 --version
          df -h
          free -m

      # ------------------- Setup Python venv -------------------
      - name: üêç Setup Python virtual environment
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          pip install "cryptography<41"
          pip install "dvc[azure]==2.45.2"
          pip install -r requirements.txt

      # ------------------- Configure DVC -------------------
      - name: ‚öôÔ∏è Configure DVC Azure Remote
        run: |
          source .venv/bin/activate
          dvc remote list | grep azureremote || dvc remote add -d azureremote azure://dvcdata
          dvc remote modify azureremote connection_string "${{ secrets.AZURE_DVC_CONNECTION }}"

      # ------------------- Pull Data -------------------
      - name: ‚¨áÔ∏è Pull data from Azure DVC remote
        run: |
          source .venv/bin/activate
          dvc pull

      - name: üîé Verify pulled data integrity
        run: |
          source .venv/bin/activate
          dvc status -c
          dvc doctor
          ls -lh data/ || true
          ls -lh *.dvc || true
          dvc list .

      # ------------------- Data Ingestion -------------------
      - name: üìÇ Run data ingestion
        run: |
          source .venv/bin/activate
          python src/data_ingestion.py

      # ------------------- Data Cleaning -------------------
      - name: üßπ Run data cleaning
        run: |
          source .venv/bin/activate
          python src/data_cleaning.py

      # ------------------- Feature Engineering -------------------
      - name: üèóÔ∏è Run feature engineering
        run: |
          source .venv/bin/activate
          python src/feature_engineering.py

      # ------------------- Model Training -------------------
      - name: üöÄ Train models and log to MLflow
        run: |
          source .venv/bin/activate
          python src/train_multi_model.py

      - name: üöÄ Promote Models to Staging stage
        run: |
          source .venv/bin/activate
          python src/promote_best_models.py

      # ------------------- Cleanup -------------------
      - name: üßπ Cleanup runner workspace and caches
        if: always()
        run: |
          echo "Cleaning up runner workspace and caches..."
          sudo rm -rf "$RUNNER_WORKSPACE"/*
          rm -rf ~/.cache/pip || true
          rm -rf ~/.dvc/cache || true
          echo "Cleanup complete."
