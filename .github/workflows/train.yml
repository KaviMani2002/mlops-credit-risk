name: Train Multi Model with DVC

on:
  workflow_dispatch:
  push:
    paths:
      - 'src/**.py'
      - '.github/workflows/train.yml'

jobs:
  train-model:
    runs-on: self-hosted  # pin to your runner

    env:
      MLFLOW_TRACKING_URI: http://20.106.177.129:5000
      AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
      AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
      GITHUB_ACTIONS: true

    steps:
      - name: üì• Checkout repo
        uses: actions/checkout@v3

      - name: üñ•Ô∏è Debug runner environment
        run: |
          echo "Runner OS: ${{ runner.os }}"
          echo "Architecture: ${{ runner.arch }}"
          python3 --version
          pip3 --version
          df -h
          free -m

      # 1Ô∏è‚É£ Create and activate virtual environment for DVC and dependencies
      - name: üêç Setup Python venv
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip --no-cache-dir
          pip install --upgrade --no-cache-dir dvc[azure] cryptography
          pip install --no-cache-dir -r requirements.txt

      # 2Ô∏è‚É£ Configure DVC remote
      - name: ‚öôÔ∏è Configure DVC Azure Remote
        run: |
          source .venv/bin/activate
          dvc remote list | grep azureremote || dvc remote add -d azureremote azure://dvcdata
          dvc remote modify azureremote connection_string "${{ secrets.AZURE_DVC_CONNECTION }}"

      # 3Ô∏è‚É£ Pull data from DVC remote inside venv
      - name: ‚¨áÔ∏è Pull data from Azure DVC remote
        run: |
          source .venv/bin/activate
          export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH
          dvc pull

      # 4Ô∏è‚É£ Verify pulled data
      - name: üîé Verify pulled data integrity
        run: |
          source .venv/bin/activate
          dvc status -c
          dvc doctor
          ls -lh data/ || true
          ls -lh *.dvc || true
          dvc list .

      # 5Ô∏è‚É£ Run ingestion, cleaning, and feature engineering inside venv
      - name: üìÇ Run data ingestion
        run: |
          source .venv/bin/activate
          python src/data_ingestion.py

      - name: üßπ Run data cleaning
        run: |
          source .venv/bin/activate
          python src/data_cleaning.py

      - name: üèóÔ∏è Run feature engineering
        run: |
          source .venv/bin/activate
          python src/feature_engineering.py

      # 6Ô∏è‚É£ Train models and log to MLflow
      - name: üöÄ Train models and log to MLflow
        run: |
          source .venv/bin/activate
          python src/train_multi_model.py

      # 7Ô∏è‚É£ Promote best models to staging
      - name: üöÄ Promote Models to Staging stage
        run: |
          source .venv/bin/activate
          python src/promote_best_models.py

      # 8Ô∏è‚É£ Cleanup workspace, caches, and runner directory
      - name: üßπ Cleanup runner workspace and caches
        if: always()
        run: |
          echo "Cleaning up runner workspace and caches..."

          # Remove repo workspace safely
          sudo rm -rf "${{ github.workspace }}"/* || true

          # Remove DVC and pip caches
          rm -rf ~/.dvc/cache || true
          rm -rf ~/.cache/pip || true

          # Remove build artifacts in runner _work folder (keep _actions)
          if [ -d "/home/azureuser/actions-runner/_work" ]; then
            sudo find /home/azureuser/actions-runner/_work -mindepth 1 -maxdepth 1 \
              -not -name "_actions" -exec rm -rf {} +
          fi

          # Clean _tool folder
          if [ -d "/home/azureuser/actions-runner/_tool" ]; then
            sudo rm -rf /home/azureuser/actions-runner/_tool/*
          fi

          # Remove old logs
          if [ -d "/home/azureuser/actions-runner/_diag" ]; then
            sudo rm -rf /home/azureuser/actions-runner/_diag/* || true
          fi

          # ‚ö° Remove all contents of actions-runner directory to free space
          sudo rm -rf /home/azureuser/actions-runner/* || true

          echo "Cleanup complete."
